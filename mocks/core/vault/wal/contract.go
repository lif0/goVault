// Code generated by MockGen. DO NOT EDIT.
// Source: goVault/internal/core/vault/wal (interfaces: WAL)
//
// Generated by this command:
//
//	mockgen -destination ./../../../../mocks/core/vault/wal/contract.go -package wal_mock . WAL
//

// Package wal_mock is a generated GoMock package.
package wal_mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWAL is a mock of WAL interface.
type MockWAL struct {
	ctrl     *gomock.Controller
	recorder *MockWALMockRecorder
	isgomock struct{}
}

// MockWALMockRecorder is the mock recorder for MockWAL.
type MockWALMockRecorder struct {
	mock *MockWAL
}

// NewMockWAL creates a new mock instance.
func NewMockWAL(ctrl *gomock.Controller) *MockWAL {
	mock := &MockWAL{ctrl: ctrl}
	mock.recorder = &MockWALMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAL) EXPECT() *MockWALMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockWAL) Start(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockWALMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockWAL)(nil).Start), arg0)
}

// Write mocks base method.
func (m *MockWAL) Write(wal string, fCommit func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", wal, fCommit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockWALMockRecorder) Write(wal, fCommit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWAL)(nil).Write), wal, fCommit)
}
