// Code generated by MockGen. DO NOT EDIT.
// Source: goVault/internal/network (interfaces: TCPServer)
//
// Generated by this command:
//
//	mockgen -destination ./../../mocks/network/contract.go -package network_mock . TCPServer
//

// Package network_mock is a generated GoMock package.
package network_mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTCPServer is a mock of TCPServer interface.
type MockTCPServer struct {
	ctrl     *gomock.Controller
	recorder *MockTCPServerMockRecorder
}

// MockTCPServerMockRecorder is the mock recorder for MockTCPServer.
type MockTCPServerMockRecorder struct {
	mock *MockTCPServer
}

// NewMockTCPServer creates a new mock instance.
func NewMockTCPServer(ctrl *gomock.Controller) *MockTCPServer {
	mock := &MockTCPServer{ctrl: ctrl}
	mock.recorder = &MockTCPServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPServer) EXPECT() *MockTCPServerMockRecorder {
	return m.recorder
}

// HandleQueries mocks base method.
func (m *MockTCPServer) HandleQueries(arg0 context.Context, arg1 func(context.Context, []byte) []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleQueries", arg0, arg1)
}

// HandleQueries indicates an expected call of HandleQueries.
func (mr *MockTCPServerMockRecorder) HandleQueries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleQueries", reflect.TypeOf((*MockTCPServer)(nil).HandleQueries), arg0, arg1)
}
